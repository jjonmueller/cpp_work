/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 // Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center). 
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == nullptr) return true;
        bool flag = traverse(root->left, root->right);
        return flag;
    }
    
    
    bool traverse(TreeNode* left, TreeNode *right) {      
        if (left == nullptr && right == nullptr) return true;
        
        if (left == nullptr && right != nullptr ||
            left != nullptr && right == nullptr ||
            left->val != right->val) {
            return false;
        }
        
        bool lflag = traverse(left->left, right->right);
        bool rflag = traverse(left->right, right->left);
      
       return lflag && rflag;
    }
};
